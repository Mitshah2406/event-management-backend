version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: evently_postgres
    environment:
      POSTGRES_DB: evently_db
      POSTGRES_USER: evently_user
      POSTGRES_PASSWORD: evently_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - evently_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evently_user -d evently_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: evently_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - evently_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  app:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile
    container_name: evently_app
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - GIN_MODE=release
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - ../../.env
    networks:
      - evently_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  evently_network:
    driver: bridge
    name: evently_prod_network
