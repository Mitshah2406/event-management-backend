# Multi-stage production Dockerfile for Go application
# Stage 1: Build stage
FROM golang:1.25.1-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies (cached if go.mod/go.sum haven't changed)
RUN go mod download && go mod verify

# Copy source code
COPY . .
# Add this line after COPY . .
COPY .env .env

# Build the binary with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o bin/server server/main.go

# Verify the binary was built
RUN ls -la bin/

# Stage 2: Production stage
FROM alpine:3.19 AS production

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata curl && \
    update-ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Create necessary directories
RUN mkdir -p /app/uploads /app/logs && \
    chown -R appuser:appgroup /app

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder --chown=appuser:appgroup /app/bin/server ./server
# Copy swagger documentation from builder stage
COPY --from=builder --chown=appuser:appgroup /app/docs/swagger.yaml ./docs/swagger.yaml
# Copy any necessary config files (if any)
# COPY --from=builder --chown=appuser:appgroup /app/configs ./configs

# Make binary executable
RUN chmod +x ./server

# Set production environment variables
ENV PORT=8080 \
    GIN_MODE=release \
    API_VERSION=v1 \
    API_PREFIX=/api \
    DB_HOST=postgres \
    DB_PORT=5432 \
    DB_USER=evently_user \
    DB_PASSWORD=JOUBkINjIQNvK1EsEFHne25nwVBr6EVr1465u4srQ/o= \
    DB_NAME=evently_prod \
    DB_SSLMODE=disable \
    REDIS_HOST=redis \
    REDIS_PORT=6379 \
    REDIS_PASSWORD=E21bQHdy4NoCyQd6PQqkHSAym+eWWEnQTiZMNCzcJp8= \
    REDIS_DB=0 \
    JWT_SECRET=zNk3VfT8v4jCirrZn9cqh7cFcEUlIdoxw1fxF0FMmfyAndzFVLEbGP/Vn2ocM6uvfcPSv2AREe5jdeuBAY4IFQ== \
    JWT_EXPIRES_IN=86400 \
    JWT_REFRESH_EXPIRES_IN=86400 \
    RATE_LIMIT_ENABLED=true \
    RATE_LIMIT_WINDOW_DURATION=60s \
    RATE_LIMIT_DEFAULT_REQUESTS=200 \
    RATE_LIMIT_PUBLIC_REQUESTS=500 \
    RATE_LIMIT_USER_REQUESTS=300 \
    RATE_LIMIT_AUTH_REQUESTS=60 \
    RATE_LIMIT_BOOKING_REQUESTS=200 \
    RATE_LIMIT_BOOKING_CRITICAL_REQUESTS=50 \
    RATE_LIMIT_ADMIN_REQUESTS=1200 \
    RATE_LIMIT_ANALYTICS_REQUESTS=120 \
    RATE_LIMIT_HEALTH_REQUESTS=1000 \
    RATE_LIMIT_WHITELISTED_IPS=127.0.0.1,::1 \
    SMTP_HOST=smtp.gmail.com \
    SMTP_PORT=587 \
    SMTP_USERNAME=elitecoders89@gmail.com \
    SMTP_PASSWORD=khoydlnfiirzftne \
    FROM_EMAIL=elitecoders89@gmail.com

# Switch to non-root user
USER appuser

# Expose port (will be mapped to 9000 in docker-compose)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start the application
CMD ["./server"]