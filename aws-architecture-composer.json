{
  "Resources": {
    "EventlyVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "Tags": [{ "Key": "Name", "Value": "Evently-VPC" }]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "EventlyVPC" },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": { "Fn::Select": [0, { "Fn::GetAZs": "" }] },
        "MapPublicIpOnLaunch": true,
        "Tags": [{ "Key": "Name", "Value": "Evently-Public-Subnet-1" }]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "EventlyVPC" },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": { "Fn::Select": [1, { "Fn::GetAZs": "" }] },
        "MapPublicIpOnLaunch": true,
        "Tags": [{ "Key": "Name", "Value": "Evently-Public-Subnet-2" }]
      }
    },
    "PrivateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "EventlyVPC" },
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": { "Fn::Select": [0, { "Fn::GetAZs": "" }] },
        "Tags": [{ "Key": "Name", "Value": "Evently-Private-Subnet-1" }]
      }
    },
    "PrivateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "EventlyVPC" },
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": { "Fn::Select": [1, { "Fn::GetAZs": "" }] },
        "Tags": [{ "Key": "Name", "Value": "Evently-Private-Subnet-2" }]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Name", "Value": "Evently-IGW" }]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "EventlyVPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "EventlyVPC" },
        "Tags": [{ "Key": "Name", "Value": "Evently-Public-RT" }]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": { "Ref": "PublicRouteTable" },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" }
      }
    },
    "PublicSubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet1" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "PublicSubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "PublicSubnet2" },
        "RouteTableId": { "Ref": "PublicRouteTable" }
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "Evently-ALB",
        "Scheme": "internet-facing",
        "Type": "application",
        "Subnets": [{ "Ref": "PublicSubnet1" }, { "Ref": "PublicSubnet2" }],
        "SecurityGroups": [{ "Ref": "ALBSecurityGroup" }],
        "Tags": [{ "Key": "Name", "Value": "Evently-ALB" }]
      }
    },
    "ALBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": "Evently-TG",
        "Port": 8080,
        "Protocol": "HTTP",
        "VpcId": { "Ref": "EventlyVPC" },
        "TargetType": "instance",
        "HealthCheckPath": "/health",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckIntervalSeconds": 30,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 3,
        "Matcher": { "HttpCode": "200" }
      }
    },
    "ALBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": { "Ref": "ALBTargetGroup" }
          }
        ],
        "LoadBalancerArn": { "Ref": "ApplicationLoadBalancer" },
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateName": "Evently-LaunchTemplate",
        "LaunchTemplateData": {
          "ImageId": "ami-0c02fb55956c7d316",
          "InstanceType": "t3.small",
          "SecurityGroupIds": [{ "Ref": "EC2SecurityGroup" }],
          "IamInstanceProfile": {
            "Arn": { "Fn::GetAtt": ["EC2InstanceProfile", "Arn"] }
          },
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "#!/bin/bash",
                  "yum update -y",
                  "yum install -y docker git",
                  "service docker start",
                  "usermod -a -G docker ec2-user",
                  "# Install Go 1.21",
                  "wget https://golang.org/dl/go1.21.1.linux-amd64.tar.gz",
                  "tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz",
                  "echo 'export PATH=$PATH:/usr/local/go/bin' >> /etc/profile",
                  "# Application deployment would go here",
                  "# git clone your-repo && cd your-repo && make build && systemctl start evently"
                ]
              ]
            }
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AutoScalingGroupName": "Evently-ASG",
        "VPCZoneIdentifier": [
          { "Ref": "PrivateSubnet1" },
          { "Ref": "PrivateSubnet2" }
        ],
        "LaunchTemplate": {
          "LaunchTemplateId": { "Ref": "LaunchTemplate" },
          "Version": { "Fn::GetAtt": ["LaunchTemplate", "LatestVersionNumber"] }
        },
        "MinSize": "2",
        "MaxSize": "6",
        "DesiredCapacity": "2",
        "TargetGroupARNs": [{ "Ref": "ALBTargetGroup" }],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 300
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": { "Ref": "AutoScalingGroup" },
        "Cooldown": "300",
        "ScalingAdjustment": "1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale up on high CPU",
        "AlarmActions": [{ "Ref": "ScaleUpPolicy" }],
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScalingGroup" }
          }
        ]
      }
    },
    "RDSSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for PostgreSQL RDS",
        "SubnetIds": [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      }
    },
    "RDSInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": "evently",
        "DBInstanceIdentifier": "evently-postgres",
        "Engine": "postgres",
        "EngineVersion": "15.4",
        "DBInstanceClass": "db.t3.micro",
        "AllocatedStorage": "20",
        "MasterUsername": "eventlyuser",
        "MasterUserPassword": "EventlyPass123!",
        "VPCSecurityGroups": [{ "Ref": "RDSSecurityGroup" }],
        "DBSubnetGroupName": { "Ref": "RDSSubnetGroup" },
        "BackupRetentionPeriod": 7,
        "PubliclyAccessible": false,
        "DeletionProtection": false
      }
    },
    "ElastiCacheSubnetGroup": {
      "Type": "AWS::ElastiCache::SubnetGroup",
      "Properties": {
        "Description": "Subnet group for Redis",
        "SubnetIds": [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      }
    },
    "ElastiCacheReplicationGroup": {
      "Type": "AWS::ElastiCache::ReplicationGroup",
      "Properties": {
        "ReplicationGroupDescription": "Redis cluster for caching",
        "ReplicationGroupId": "evently-redis",
        "Engine": "redis",
        "CacheNodeType": "cache.t3.micro",
        "NumCacheClusters": 2,
        "Port": 6379,
        "SecurityGroupIds": [{ "Ref": "ElastiCacheSecurityGroup" }],
        "CacheSubnetGroupName": { "Ref": "ElastiCacheSubnetGroup" },
        "AutomaticFailoverEnabled": true
      }
    },
    "MSKCluster": {
      "Type": "AWS::MSK::Cluster",
      "Properties": {
        "ClusterName": "evently-kafka",
        "KafkaVersion": "3.5.1",
        "NumberOfBrokerNodes": 3,
        "BrokerNodeGroupInfo": {
          "InstanceType": "kafka.t3.small",
          "ClientSubnets": [
            { "Ref": "PrivateSubnet1" },
            { "Ref": "PrivateSubnet2" }
          ],
          "SecurityGroups": [{ "Ref": "MSKSecurityGroup" }],
          "StorageInfo": { "EBSStorageInfo": { "VolumeSize": 10 } }
        }
      }
    },
    "ALBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for ALB",
        "VpcId": { "Ref": "EventlyVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "EC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for EC2 instances",
        "VpcId": { "Ref": "EventlyVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 8080,
            "ToPort": 8080,
            "SourceSecurityGroupId": { "Ref": "ALBSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "10.0.0.0/16"
          }
        ]
      }
    },
    "RDSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for RDS",
        "VpcId": { "Ref": "EventlyVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 5432,
            "ToPort": 5432,
            "SourceSecurityGroupId": { "Ref": "EC2SecurityGroup" }
          }
        ]
      }
    },
    "ElastiCacheSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for Redis",
        "VpcId": { "Ref": "EventlyVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 6379,
            "ToPort": 6379,
            "SourceSecurityGroupId": { "Ref": "EC2SecurityGroup" }
          }
        ]
      }
    },
    "MSKSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for Kafka",
        "VpcId": { "Ref": "EventlyVPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 9092,
            "ToPort": 9092,
            "SourceSecurityGroupId": { "Ref": "EC2SecurityGroup" }
          }
        ]
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "ec2.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "EventlyAppPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [{ "Ref": "EC2Role" }]
      }
    }
  },
  "Outputs": {
    "LoadBalancerDNS": {
      "Description": "DNS name of the Load Balancer",
      "Value": { "Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"] },
      "Export": { "Name": "Evently-ALB-DNS" }
    },
    "RDSEndpoint": {
      "Description": "PostgreSQL database endpoint",
      "Value": { "Fn::GetAtt": ["RDSInstance", "Endpoint.Address"] },
      "Export": { "Name": "Evently-RDS-Endpoint" }
    },
    "RedisEndpoint": {
      "Description": "Redis cluster endpoint",
      "Value": {
        "Fn::GetAtt": ["ElastiCacheReplicationGroup", "RedisEndpoint.Address"]
      },
      "Export": { "Name": "Evently-Redis-Endpoint" }
    },
    "KafkaBootstrapServers": {
      "Description": "Kafka bootstrap servers",
      "Value": { "Fn::GetAtt": ["MSKCluster", "BootstrapBrokerString"] },
      "Export": { "Name": "Evently-Kafka-BootstrapServers" }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Default": "t3.small",
      "AllowedValues": ["t3.small", "t3.medium", "t3.large"],
      "Description": "EC2 instance type for the application servers"
    },
    "Environment": {
      "Type": "String",
      "Default": "production",
      "AllowedValues": ["development", "staging", "production"],
      "Description": "Environment name"
    }
  }
}
