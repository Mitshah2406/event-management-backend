name: Deploy to Hostinger VPS

on:
  push:
    branches: [main, production]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'ENDSSH'
            set -e
            
            # Navigate to project directory (updated path)
            cd /var/www/EventlyAtlanMitShah/event-management-backend
            
            # Pull latest changes
            echo "📄 Pulling latest code..."
            git pull origin main
            
            # Stop existing services gracefully
            echo "🛑 Stopping existing services..."
            docker compose -f deployments/docker/docker-compose.prod.yml --env-file .env down || true
            
            # Build and restart services (using .env instead of .env.prod)
            echo "🐳 Building and restarting services..."
            docker compose -f deployments/docker/docker-compose.prod.yml --env-file .env pull
            docker compose -f deployments/docker/docker-compose.prod.yml --env-file .env up -d --build
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to start..."
            sleep 45
            
            # Health check with multiple attempts
            echo "🩺 Performing health check..."
            max_attempts=5
            attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Health check attempt $attempt/$max_attempts"
              if curl -f http://localhost:9000/health >/dev/null 2>&1; then
                echo "✅ Deployment successful! Application is healthy."
                break
              else
                if [ $attempt -eq $max_attempts ]; then
                  echo "❌ Health check failed after $max_attempts attempts. Check logs:"
                  docker compose -f deployments/docker/docker-compose.prod.yml logs --tail=50 app
                  exit 1
                fi
                echo "Attempt $attempt failed, retrying in 10 seconds..."
                sleep 10
                attempt=$((attempt + 1))
              fi
            done
            
            # Show service status
            echo "📊 Service Status:"
            docker compose -f deployments/docker/docker-compose.prod.yml ps
            
            # Cleanup old images and containers
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            docker container prune -f
            
            echo "🎉 Deployment completed successfully!"
            echo "🌍 Application is running at: http://$(curl -s ifconfig.me):9000"
          ENDSSH

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment to VPS completed successfully!"
            echo "🌐 Check your application at: http://your-vps-ip:9000"
          else
            echo "❌ Deployment to VPS failed!"
            echo "📋 Check the workflow logs for details."
          fi
